/*
 * Copyright (c) 2008-2019 Haulmont.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package spec.haulmont.cuba.web.datacontext

import com.haulmont.cuba.core.model.TestIdentityIdEntity
import io.jmix.core.impl.StandardSerialization
import io.jmix.ui.model.DataComponents
import org.springframework.beans.factory.annotation.Autowired
import spec.haulmont.cuba.web.UiScreenSpec

class DataContextIdProxyTest extends UiScreenSpec {

    @Autowired
    private DataComponents factory
    @Autowired
    protected StandardSerialization standardSerialization;

    @SuppressWarnings("GroovyAccessibility")
    def "identity-id entity merged after assigning id generated by database"() {
        def entity = new TestIdentityIdEntity(name: 'aaa')

        def dataContext = factory.createDataContext()

        def merged = dataContext.merge(entity)

        when:

        TestIdentityIdEntity serverSideEntity = reserialize(merged)
        serverSideEntity.setId(10)
        TestIdentityIdEntity returnedEntity = reserialize(serverSideEntity)

        TestIdentityIdEntity mergedReturnedEntity = dataContext.merge(returnedEntity)

        then:

        mergedReturnedEntity.getId() == 10
    }

    def reserialize(Serializable object) {
        if (object == null) {
            return null;
        }
        return standardSerialization.deserialize(standardSerialization.serialize(object));
    }
}
