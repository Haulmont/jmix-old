/*
 * Copyright 2019 Haulmont.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        springBootVersion = '2.2.4.RELEASE'
        jmixVersion = '0.0.1-SNAPSHOT'
    }
    repositories {
        if (rootProject.hasProperty('jmixRepoUrl')) {
            maven {
                url rootProject['jmixRepoUrl']

                if (rootProject.hasProperty('jmixRepoUser') && rootProject.hasProperty('jmixRepoPassword')) {
                    credentials {
                        username rootProject['jmixRepoUser']
                        password rootProject['jmixRepoPassword']
                    }
                }
            }
        } else {
            jcenter()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }
    dependencies {
        classpath("io.jmix.gradle:jmix-gradle-plugin:0.0.1-SNAPSHOT")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.7.1")
    }
}

ext {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

allprojects {
    repositories {
        if (rootProject.hasProperty('jmixRepoUrl')) {
            maven {
                url rootProject['jmixRepoUrl']

                if (rootProject.hasProperty('jmixRepoUser') && rootProject.hasProperty('jmixRepoPassword')) {
                    credentials {
                        username rootProject['jmixRepoUser']
                        password rootProject['jmixRepoPassword']
                    }
                }
            }
        } else {
            jcenter()
            maven { url "https://dl.bintray.com/cuba-platform/main" }
        }
    }
}

configure([project(':jmix-platform'), project(':modules:core'), project(':modules:cuba'), project(':modules:data'),
           project(':modules:remoting'), project(':modules:security'), project(':modules:ui'), project(':modules:audit'),
           project(':modules:ui-themes'), project(':modules:ui-themes-compiled'),
           project(':modules:ui-widgets'), project(':modules:ui-widgets-compiled'),
           project(':starters:starter-data'), project(':starters:starter-ui'), project(':starters:starter-security'),
           project(':starters:starter-standard-nowidgets'), project(':starters:starter-standard'),
           project(':starters:starter-cuba')]) {

    apply plugin: 'maven-publish'
    
    publishing {
        if (rootProject.hasProperty('jmixUploadUrl')) {
            repositories {
                maven {
                    url = jmixVersion.endsWith('SNAPSHOT') ? "$jmixUploadUrl/snapshots" : "$jmixUploadUrl/releases"
                    credentials {
                        username rootProject['jmixUploadUser']
                        password rootProject['jmixUploadPassword']
                    }
                }
            }
        }
    }
}

configure([project(':modules:core'), project(':modules:data'), project(':modules:security'), project(':modules:remoting'),
           project(':modules:audit')]) {
    if (rootProject.hasProperty('spotbugsEnabled')) {
        apply plugin: 'com.github.spotbugs'

        project.afterEvaluate {
            spotbugs {
                toolVersion = '3.1.12'
                ignoreFailures = true
                omitVisitors = ['FindDoubleCheck']
                excludeFilter = rootProject.file("codestyle/exclude-filter.xml")
                effort = "max"
                reportLevel = "medium"
            }

            spotbugsMain {
                jvmArgs '-Xmx1024m'

                reports {
                    xml.enabled = false
                    html {
                        enabled = true
                        stylesheet = rootProject.resources.text.fromFile('codestyle/fancy-hist.xsl')
                        destination file("${project.buildDir}/reports/spotbugs/${project.name}.html")
                    }
                }
            }

            spotbugsTest {
                jvmArgs '-Xmx1024m'

                reports {
                    xml.enabled = false
                    html {
                        enabled = true
                        stylesheet = project.resources.text.fromFile('codestyle/fancy-hist.xsl')
                        destination file("${project.buildDir}/reports/spotbugs/test-${project.name}.html")
                    }
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Javadoc) {
        options.addStringOption("sourcepath", "")
        options.encoding = 'UTF-8'
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        destinationDir = file("$buildDir/docs/javadoc")

        title = "${project.name.toUpperCase()} ${project.version.replace('-SNAPSHOT','')} API"
    }
}
